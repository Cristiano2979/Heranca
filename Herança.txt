

/*Cria uma Classe Pessoa, contendo os atributos encapsulados, com seus respectivos seletores (getters) e modificadores (setters), 
  e ainda o construtor padrão e pelo menos mais duas opções de construtores conforme sua percepção. Atributos: String nome; String endereço; String telefone;*/

// Classe Pessoa
public class Pessoa {
    private String nome;
    private String endereco;
    private String telefone;

    // Construtor padrão
    public Pessoa() {}

    // Construtor com nome, endereço e telefone
    public Pessoa(String nome, String endereco, String telefone) {
        this.nome = nome;
        this.endereco = endereco;
        this.telefone = telefone;
    }

    // Getters e Setters
    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getEndereco() {
        return endereco;
    }

    public void setEndereco(String endereco) {
        this.endereco = endereco;
    }

    public String getTelefone() {
        return telefone;
    }

    public void setTelefone(String telefone) {
        this.telefone = telefone;
    }
}

/* Considere, como subclasse da classe Pessoa (desenvolvida no exercício anterior) a classe Fornecedor. 
Considere que cada instância da classe Fornecedor tem, para além dos atributos que caracterizam a classe Pessoa, 
os atributos valorCredito (correspondente ao crédito máximo atribuído ao fornecedor) e valorDivida (montante da dívida para com o fornecedor). 
Implemente na classe Fornecedor, para além dos usuais métodos seletores e modificadores, 
um método obterSaldo() que devolve a diferença entre os valores dos atributos valorCredito e valorDivida. Depois de implementada a classe Fornecedor, 
crie um programa de teste adequado que lhe permita verificar o funcionamento dos métodos implementados na classe Fornecedor e os herdados da classe Pessoa.*/

// Classe Fornecedor
public class Fornecedor extends Pessoa {
    private double valorCredito;
    private double valorDivida;

    // Construtor padrão
    public Fornecedor() {}

    // Construtor com nome, endereço, telefone, valorCredito e valorDivida
    public Fornecedor(String nome, String endereco, String telefone, double valorCredito, double valorDivida) {
        super(nome, endereco, telefone);
        this.valorCredito = valorCredito;
        this.valorDivida = valorDivida;
    }

    // Método para obter saldo
    public double obterSaldo() {
        return valorCredito - valorDivida;
    }

    // Getters e Setters
    public double getValorCredito() {
        return valorCredito;
    }

    public void setValorCredito(double valorCredito) {
        this.valorCredito = valorCredito;
    }

    public double getValorDivida() {
        return valorDivida;
    }

    public void setValorDivida(double valorDivida) {
        this.valorDivida = valorDivida;
    }
}

/* Considere, como subclasse da classe Pessoa, a classe Empregado. Considere que cada instância da classe Empregado tem, 
para além dos atributos que caracterizam a classe Pessoa, os atributos codigoSetor (inteiro), salarioBase (vencimento base) e imposto (porcentagem retida dos impostos). 
Implemente a classe Empregado com métodos seletores e modificadores e um método calcularSalario. Escreva um programa de teste adequado para a classe Empregado.*/


// Classe Empregado
public class Empregado extends Pessoa {
    private int codigoSetor;
    private double salarioBase;
    private double imposto;

    // Construtor padrão
    public Empregado() {}

    // Construtor com nome, endereço, telefone, codigoSetor, salarioBase e imposto
    public Empregado(String nome, String endereco, String telefone, int codigoSetor, double salarioBase, double imposto) {
        super(nome, endereco, telefone);
        this.codigoSetor = codigoSetor;
        this.salarioBase = salarioBase;
        this.imposto = imposto;
    }

    // Método para calcular o salário
    public double calcularSalario() {
        return salarioBase - (salarioBase * (imposto / 100));
    }

    // Getters e Setters
    public int getCodigoSetor() {
        return codigoSetor;
    }

    public void setCodigoSetor(int codigoSetor) {
        this.codigoSetor = codigoSetor;
    }

    public double getSalarioBase() {
        return salarioBase;
    }

    public void setSalarioBase(double salarioBase) {
        this.salarioBase = salarioBase;
    }

    public double getImposto() {
        return imposto;
    }

    public void setImposto(double imposto) {
        this.imposto = imposto;
    }
}


/*Implemente a classe Administrador como subclasse da classe Empregado. 
Um determinado administrador tem como atributos, para além dos atributos da classe Pessoa e da classe Empregado, 
o atributo ajudaDeCusto (ajudas referentes a viagens, estadias, ...). 
Note que deverá redefinir na classe Administrador o método herdado calcularSalario (o salário de um administrador é equivalente ao salário de um empregado usual acrescido das ajuda de custo). 
Escreva um programa de teste adequado para esta classe.*/

// Classe Administrador
public class Administrador extends Empregado {
    private double ajudaDeCusto;

    // Construtor padrão
    public Administrador() {}

    // Construtor com nome, endereço, telefone, codigoSetor, salarioBase, imposto e ajudaDeCusto
    public Administrador(String nome, String endereco, String telefone, int codigoSetor, double salarioBase, double imposto, double ajudaDeCusto) {
        super(nome, endereco, telefone, codigoSetor, salarioBase, imposto);
        this.ajudaDeCusto = ajudaDeCusto;
    }

    // Redefinição do método calcularSalario
    @Override
    public double calcularSalario() {
        return super.calcularSalario() + ajudaDeCusto;
    }

    // Getters e Setters
    public double getAjudaDeCusto() {
        return ajudaDeCusto;
    }

    public void setAjudaDeCusto(double ajudaDeCusto) {
        this.ajudaDeCusto = ajudaDeCusto;
    }
}


/*Implemente a classe Operario como subclasse da classe Empregado. 
Um determinado operário tem como atributos, para além dos atributos da classe Pessoa e da classe Empregado, 
o atributo valorProducao (que corresponde ao valor monetário dos artigos efetivamente produzidos pelo operário) e comissao (que corresponde à porcentagem do valorProducao que será adicionado ao vencimento base do operário). 
Note que deverá redefinir nesta subclasse o método herdado calcularSalario (o salário de um operário é equivalente ao salário de um empregado usual acrescido da referida comissão). Escreva um programa de teste adequado para esta classe.*/


// Classe Operario
public class Operario extends Empregado {
    private double valorProducao;
    private double comissao;

    // Construtor padrão
    public Operario() {}

    // Construtor com nome, endereço, telefone, codigoSetor, salarioBase, imposto, valorProducao e comissao
    public Operario(String nome, String endereco, String telefone, int codigoSetor, double salarioBase, double imposto, double valorProducao, double comissao) {
        super(nome, endereco, telefone, codigoSetor, salarioBase, imposto);
        this.valorProducao = valorProducao;
        this.comissao = comissao;
    }

    // Redefinição do método calcularSalario
    @Override
    public double calcularSalario() {
        return super.calcularSalario() + (valorProducao * (comissao / 100));
    }

    // Getters e Setters
    public double getValorProducao() {
        return valorProducao;
    }

    public void setValorProducao(double valorProducao) {
        this.valorProducao = valorProducao;
    }

    public double getComissao() {
        return comissao;
    }

    public void setComissao(double comissao) {
        this.comissao = comissao;
    }
}



*/ Implemente a classe Vendedor como subclasse da classe Empregado. Um determinado vendedor tem como atributos, 
para além dos atributos da classe Pessoa e da classe Empregado, o atributo valorVendas (correspondente ao valor monetário dos artigos vendidos) e 
o atributo comissao (porcentagem do valorVendas que será adicionado ao vencimento base do Vendedor). Note que deverá redefinir nesta subclasse o método herdado calcularSalario 
(o salário de um vendedor é equivalente ao salário de um empregado usual acrescido da referida comissão). 
Escreva um programa de teste adequado para esta classe.*/


// Classe Vendedor
public class Vendedor extends Empregado {
    private double valorVendas;
    private double comissao;

    // Construtor padrão
    public Vendedor() {}

    // Construtor com nome, endereço, telefone, codigoSetor, salarioBase, imposto, valorVendas e comissao
    public Vendedor(String nome, String endereco, String telefone, int codigoSetor, double salarioBase, double imposto, double valorVendas, double comissao) {
        super(nome, endereco, telefone, codigoSetor, salarioBase, imposto);
        this.valorVendas = valorVendas;
        this.comissao = comissao;
    }

    // Redefinição do método calcularSalario
    @Override
    public double calcularSalario() {
        return super.calcularSalario() + (valorVendas * (comissao / 100));
    }

    // Getters e Setters
    public double getValorVendas() {
        return valorVendas;
    }

    public void setValorVendas(double valorVendas) {
        this.valorVendas = valorVendas;
    }

    public double getComissao() {
        return comissao;
    }

    public void setComissao(double comissao) {
        this.comissao = comissao;
    }
}



















